from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from bot import dp, bot
from database.db_session import get_db
from database.models import User
from sqlalchemy.orm import Session

@dp.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Å†ü™™")
async def show_profile(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if user:
        await message.answer("ü™™")
        
        profile_text = (
            f"ü™™ *‚Å†–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"ID: *{user.telegram_id}*\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: *{user.registration_time.strftime('%d.%m.%Y')}*\n\n"
            f"–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: *{user.balance}‚ÇΩ*\n"
            f"–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: *{user.partner_balance}‚ÇΩ*\n\n"
            f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            f"–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: *{user.total_purchases}*"
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            types.InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üì¶", callback_data="my_orders"),
            types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å üí≥", callback_data="replenish")
        )
        keyboard.row(
            types.InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•", callback_data="referral_program")
        )
        
        await message.answer(profile_text, parse_mode='Markdown', reply_markup=keyboard.as_markup())
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(F.data == 'my_orders')
async def my_orders_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã.")

@dp.callback_query(F.data == 'replenish')
async def replenish_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.")

@dp.callback_query(F.data == 'referral_program')
async def referral_program_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.")

@dp.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è üìû")
async def contact_support(message: types.Message):
    await message.answer("üë®‚Äçüíª")
    support_text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets")
    )
    
    await message.answer(support_text, reply_markup=keyboard.as_markup())

@dp.callback_query(F.data == 'create_ticket')
async def create_ticket_callback(callback_query: types.CallbackQuery):
    message_text = "üì© *–°–≤—è–∑–∞—Ç—å—Å—è  ‚Ä∫  –í—ã–±–æ—Ä —Ç–µ–º—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º", callback_data="issue_order")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º", callback_data="issue_replenish")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π", callback_data="issue_payment")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä—É", callback_data="issue_product")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="back_to_support")
    )
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@dp.callback_query(F.data == 'my_tickets')
async def my_tickets_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.")

@dp.callback_query(F.data == 'back_to_support')
async def back_to_support_callback(callback_query: types.CallbackQuery):
    support_text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets")
    )
    
    await callback_query.message.edit_text(support_text, reply_markup=keyboard.as_markup())