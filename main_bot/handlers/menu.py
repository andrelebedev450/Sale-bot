import os
from aiogram import types, F
from aiogram.types import FSInputFile
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from bot import dp, bot, assets_dir
from database.db_session import get_db
from database.models import User
from sqlalchemy.orm import Session

async def edit_message_to_previous_state(callback_query: types.CallbackQuery, previous_state_function, delete_previous_message=False):
    await callback_query.message.delete()
    if delete_previous_message:
        try:
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id - 1)
        except:
            pass
    if 'user' in previous_state_function.__code__.co_varnames:
        await previous_state_function(callback_query.message, callback_query.from_user)
    else:
        await previous_state_function(callback_query.message)

@dp.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Å†ü™™")
async def show_profile(message: types.Message, user: types.User = None):
    db = next(get_db())
    user_id = user.id if user else message.from_user.id
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if user:
        await message.answer("ü™™")
        
        profile_text = (
            f"ü™™ *‚Å†–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"ID: *{user.telegram_id}*\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: *{user.registration_time.strftime('%d.%m.%Y')}*\n\n"
            f"–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: *{user.balance}‚ÇΩ*\n"
            f"–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: *{user.partner_balance}‚ÇΩ*\n\n"
            f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            f"–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: *{user.total_purchases}*"
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            types.InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üì¶", callback_data="my_orders"),
            types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å üí≥", callback_data="replenish")
        )
        keyboard.row(
            types.InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üë•", callback_data="referral_program")
        )
        
        await message.answer(profile_text, parse_mode='Markdown', reply_markup=keyboard.as_markup())
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(F.data == 'my_orders')
async def my_orders_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã.")

@dp.callback_query(F.data == 'referral_program')
async def referral_program_callback(callback_query: types.CallbackQuery):
    message_text = (
        "üí∏ *–î–µ–Ω—å–≥–∏ –∑–∞ –¥—Ä—É–∑–µ–π*\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: *0*\n"
        "–ë–∞–ª–∞–Ω—Å: *0‚ÇΩ*\n\n"
        "–ü–æ–ª—É—á–∞–π *10‚ÇΩ –∑–∞ –æ–¥–Ω–æ–≥–æ* –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞\n\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞:\n"
        "[https://t.me/this_bot?start=50ANa9toFQ](https://t.me/this_bot?start=50ANa9toFQ)"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw_funds")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="back_to_profile:show_profile:True")
    )
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@dp.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è üìû")
async def contact_support(message: types.Message):
    await message.answer("üë®‚Äçüíª")
    support_text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="create_ticket")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets")
    )
    
    await message.answer(support_text, reply_markup=keyboard.as_markup())

@dp.callback_query(F.data == 'create_ticket')
async def create_ticket_callback(callback_query: types.CallbackQuery):
    message_text = "üì© *–°–≤—è–∑–∞—Ç—å—Å—è  ‚Ä∫  –í—ã–±–æ—Ä —Ç–µ–º—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º", callback_data="issue_order")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º", callback_data="issue_replenish")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π", callback_data="issue_payment")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä—É", callback_data="issue_product")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="back_to_support:contact_support:True")
    )
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@dp.callback_query(F.data == 'my_tickets')
async def my_tickets_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üì© *–°–≤—è–∑–∞—Ç—å—Å—è  ‚Ä∫  –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è*\n\n –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è.", parse_mode="Markdown")

@dp.message(F.text == "üéÅ –ü–û–õ–£–ß–ò –ë–û–ù–£–°–´ üéÅ")
async def get_bonuses(message: types.Message):
    await message.answer("üí∞")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="‚ö°üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏ (N) üéÅ‚ö°", callback_data="lotteries")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã (N)", callback_data="promotions")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–î–µ–Ω—å–≥–∏ –∑–∞ –¥—Ä—É–∑–µ–π", callback_data="referral_money")
    )
    
    await message.answer("üéÅ –ë–æ–Ω—É—Å—ã, —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∑–∞–¥–∞–Ω–∏—è", reply_markup=keyboard.as_markup())

@dp.callback_query(F.data == 'lotteries')
async def lotteries_callback(callback_query: types.CallbackQuery):
    message_text = "üé∞ *–†–æ–∑—ã–≥—Ä—ã—à–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à:"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="üé´–ú–æ–∏ –±–∏–ª–µ—Ç—ã", callback_data="my_tickets_lotteries")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="back_to_bonuses:get_bonuses:True")
    )
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@dp.callback_query(F.data == 'my_tickets_lotteries')
async def my_tickets_lotteries_callback(callback_query: types.CallbackQuery):
    message_text = "üé´ *–ú–æ–∏ –±–∏–ª–µ—Ç—ã*\n\n–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: *0*"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="back_to_bonuses:get_bonuses:True")
    )
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@dp.callback_query(F.data == 'promotions')
async def promotions_callback(callback_query: types.CallbackQuery):
    message_text = "üéÅ *–ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="back_to_bonuses:get_bonuses:True")
    )
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@dp.callback_query(F.data == 'referral_money')
async def referral_money_callback(callback_query: types.CallbackQuery):
    message_text = (
        "üí∏ *–î–µ–Ω—å–≥–∏ –∑–∞ –¥—Ä—É–∑–µ–π*\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: *0*\n"
        "–ë–∞–ª–∞–Ω—Å: *0‚ÇΩ*\n\n"
        "–ü–æ–ª—É—á–∞–π *10‚ÇΩ –∑–∞ –æ–¥–Ω–æ–≥–æ* –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞\n\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞:\n"
        "[https://t.me/this_bot?start=50ANa9toFQ](https://t.me/this_bot?start=50ANa9toFQ)"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw_funds")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="< –ù–∞–∑–∞–¥", callback_data="back_to_bonuses:get_bonuses:True")
    )
    
    await callback_query.message.edit_text(message_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@dp.callback_query(F.data == 'withdraw_funds')
async def withdraw_funds_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.", parse_mode="Markdown")

@dp.callback_query(F.data.startswith('back_to_'))
async def universal_back_callback(callback_query: types.CallbackQuery):
    data = callback_query.data.split(':')
    function_name = data[1]
    delete_previous_message = data[2] == 'True'
    function = globals()[function_name]
    await edit_message_to_previous_state(callback_query, function, delete_previous_message)

@dp.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üõçÔ∏è")
async def show_catalog(message: types.Message):
    await message.answer("üõí")
    photo_path = os.path.join(assets_dir, 'img', 'catalog_img.jpg')
    if os.path.exists(photo_path):
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo)
    else:
        pass

@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥")
async def replenish_balance_text(message: types.Message):
    await replenish_balance(message)

@dp.callback_query(F.data == 'replenish')
async def replenish_balance_callback(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id - 1)
    await callback_query.message.delete()
    await replenish_balance(callback_query.message)

async def replenish_balance(message: types.Message):
    await message.answer("üí∏")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="250‚ÇΩ", callback_data="replenish_250"),
        types.InlineKeyboardButton(text="500‚ÇΩ", callback_data="replenish_500"),
        types.InlineKeyboardButton(text="1000‚ÇΩ", callback_data="replenish_1000"),
        types.InlineKeyboardButton(text="2000‚ÇΩ", callback_data="replenish_2000")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="3000‚ÇΩ", callback_data="replenish_3000"),
        types.InlineKeyboardButton(text="4000‚ÇΩ", callback_data="replenish_4000"),
        types.InlineKeyboardButton(text="5000‚ÇΩ", callback_data="replenish_5000")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="10000‚ÇΩ", callback_data="replenish_10000"),
        types.InlineKeyboardButton(text="15000‚ÇΩ", callback_data="replenish_15000"),
        types.InlineKeyboardButton(text="20000‚ÇΩ", callback_data="replenish_20000")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="‚¨áÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞ ‚¨áÔ∏è", callback_data="replenish_other")
    )
    
    await message.answer("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", reply_markup=keyboard.as_markup())

@dp.callback_query(F.data == 'replenish_other')
async def replenish_other_callback(callback_query: types.CallbackQuery):
    await callback_query.answer("‚ôªÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É", show_alert=True)